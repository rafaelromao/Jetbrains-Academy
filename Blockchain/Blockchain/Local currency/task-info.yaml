type: edu
custom_name: stage6
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/blockchain/Miner.java
  visible: true
  text: |
    package blockchain;

    import java.io.IOException;
    import java.util.concurrent.TimeUnit;

    public class Miner implements Runnable {
        private final BlockChain blockChain;
        private final int id;

        public Miner(BlockChain blockChain, int id) {
            this.blockChain = blockChain;
            this.id = id;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    blockChain.tryPutNewBlock(id);
                    TimeUnit.MILLISECONDS.sleep(2);
                }
            } catch (IOException | InterruptedException e) {
            }
        }
    }
  learner_created: true
- name: src/blockchain/Hash.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.security.MessageDigest;

    public class Hash implements Serializable {

        private static final long serialVersionUID = 1L;

        private final String hash;

        public Hash(String text) {
            this.hash = hash(text);
        }

        private String hash(String input) {
            try {
                var digest = MessageDigest.getInstance("SHA-256");
                var hash = digest.digest(input.getBytes("UTF-8"));
                var hexString = new StringBuilder();
                for (var elem : hash) {
                    var hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        public boolean validate(int proofLength, String input) {
            var proof = hash.substring(0, proofLength).replaceAll("0", "");
            if (!"".equals(proof)) {
                return false;
            }
            return hash.equals(hash(input));
        }

        @Override
        public String toString() {
            return hash;
        }
    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.io.*;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.security.InvalidKeyException;
    import java.security.NoSuchAlgorithmException;
    import java.security.SignatureException;
    import java.time.Duration;
    import java.util.ArrayDeque;
    import java.util.Queue;
    import java.util.Stack;
    import java.util.stream.Stream;

    import static java.util.stream.Collectors.toList;

    public class BlockChain implements Serializable {

        private static final long serialVersionUID = 1L;

        public static BlockChain load(String fileName)
                throws IOException, ClassNotFoundException,
                       NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            BlockChain blockChain;
            if (Files.exists(Paths.get(fileName))) {
                try (var file = new FileInputStream(fileName);
                     var buffer = new BufferedInputStream(file);
                     var stream = new ObjectInputStream(buffer)) {

                    blockChain = (BlockChain) stream.readObject();
                    blockChain.validate();
                }
            } else {
                blockChain = new BlockChain(fileName);
            }
            return blockChain;
        }

        private String fileName;
        private final Stack<Block> blocks = new Stack<>();
        private long lastBlockTime = System.currentTimeMillis();
        private int proofLength = 0;
        private int previousProofLength = 0;
        private Queue<Message> messagesForTheNextBlock = new ArrayDeque<>();
        private int nextMessageId = 1;

        public BlockChain() {
        }

        public BlockChain(String fileName) {
            this();
            this.fileName = fileName;
        }

        private Hash getLastBlockHash() {
            synchronized (blocks) {
                return blocks.size() == 0 ? null : blocks.peek().getHash();
            }
        }

        private boolean put(Block block) throws IOException {
            synchronized (blocks) {
                if (block.getId() == getNextBlockId()) {
                    blocks.add(block);
                    save();
                    adjustProofLength();
                    return true;
                }
                return false;
            }
        }

        private int getNextBlockId() {
            synchronized (blocks) {
                return blocks.size();
            }
        }

        private void adjustProofLength() {
            var idleTime = Duration.ofMillis(System.currentTimeMillis() - lastBlockTime);
            lastBlockTime = System.currentTimeMillis();
            if (idleTime.toSeconds() < 1) {
                previousProofLength = proofLength;
                proofLength++;
            } else if (idleTime.toMinutes() > 1) {
                previousProofLength = proofLength;
                proofLength--;
            }
        }

        private void save() throws IOException {
            synchronized (blocks) {
                synchronized (messagesForTheNextBlock) {
                    if (fileName == null) {
                        return;
                    }
                    var path = Paths.get(fileName);
                    if (Files.exists(path)) {
                        Files.delete(path);
                    }
                    try (var file = new FileOutputStream(fileName);
                         var buffer = new BufferedOutputStream(file);
                         var stream = new ObjectOutputStream(buffer)) {
                        stream.writeObject(this);
                    }
                }
            }
        }

        private void validate() throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            synchronized (blocks) {
                if (!blocks.empty()) {
                    blocks.get(0).validate(null);
                    for (int i = 1; i < blocks.size(); i++) {
                        var currentBlock = blocks.get(i);
                        var previousBlock = blocks.get(i - 1);
                        // Validate messages
                        MessageList previousBlockMessages = previousBlock.getData();
                        previousBlockMessages.validate();
                        MessageList currentBlockMessages = currentBlock.getData();
                        currentBlockMessages.validate();
                        if (previousBlockMessages
                                .messages()
                                .mapToInt(m -> m.getId()).max().orElse(-1) >=
                            currentBlockMessages
                                .messages()
                                .mapToInt(m -> m.getId()).min().orElse(0)) {
                            throw new IllegalArgumentException("Message ids are not valid!");
                        }
                        // Validate block
                        currentBlock.validate(previousBlock.getHash());
                    }
                }
            }
        }

        public Stream<Block> blocks() {
            synchronized (blocks) {
                return blocks.stream();
            }
        }

        public int getNextMessageId() {
            synchronized (messagesForTheNextBlock)        {
                return nextMessageId++;
            }
        }

        public void queueMessage(Message message) {
            synchronized (messagesForTheNextBlock) {
                var lastMessageId = messagesForTheNextBlock.stream().mapToInt(m -> m.getId()).max().orElse(0);
                if (message.getId() <= lastMessageId) {
                    return;
                }
                messagesForTheNextBlock.add(message);
            }
        }

        public boolean tryPutNewBlock(int minerId) throws IOException {
            var blockId = getNextBlockId();
            var previous = getLastBlockHash();
            synchronized (messagesForTheNextBlock) {
                var block = new Block(
                        minerId,
                        blockId,
                        proofLength,
                        previous,
                        Integer.compare(proofLength, previousProofLength),
                        messagesForTheNextBlock.isEmpty()
                                ? null
                                : new MessageList(
                                messagesForTheNextBlock
                                        .stream()
                                        .collect(toList()))
                );
                var result = put(block);
                if (result) {
                    messagesForTheNextBlock.clear();
                }
                return result;
            }
        }

        public void setFileName(String fileName) {
            this.fileName = fileName;
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.time.Duration;

    public class Block implements Serializable {

        private static final long serialVersionUID = 1L;

        private final int minerId;
        private final int id;
        private final int proofLength;
        private final int proofLengthState;
        private final long timestamp;
        private final Hash current;
        private final Hash previous;
        private int magicNumber;
        private transient long generatingTime;
        private Serializable data;

        public Block(int minerId, int id, int proofLength, Hash hashOfPreviousBlock, int proofLengthState, Serializable data) {
            this.minerId = minerId;
            this.id = id;
            this.proofLength = proofLength;
            this.proofLengthState = proofLengthState;
            this.data = data;
            this.timestamp = System.currentTimeMillis();
            this.previous = hashOfPreviousBlock;
            this.current = hash();
        }

        private Hash hash() {
            var start = System.currentTimeMillis();
            try {
                while (true) {
                    magicNumber = (int) (Math.random() * Integer.MAX_VALUE);
                    var hash = new Hash(getValues());
                    if (hash.validate(proofLength, getValues())) {
                        return hash;
                    }
                }
            } finally {
                var end = System.currentTimeMillis();
                generatingTime = Duration.ofMillis(end - start).toSeconds();
            }
        }

        private String getValues() {
            return Integer.toString(magicNumber) +
                    minerId +
                    id +
                    timestamp +
                    data +
                    (previous != null ? previous : 0);
        }

        public Hash getHash() {
            return current;
        }

        @Override
        public String toString() {
            var sb = new StringBuilder();
            sb.append("Block:");
            sb.append("\n");
            sb.append("Created by miner # ");
            sb.append(minerId);
            sb.append("\n");
            sb.append("Id: ");
            sb.append(id);
            sb.append("\n");
            sb.append("Timestamp: ");
            sb.append(timestamp);
            sb.append("\n");
            sb.append("Magic number: ");
            sb.append(magicNumber);
            sb.append("\n");
            sb.append("Hash of the previous block:");
            sb.append("\n");
            sb.append(previous == null ? 0 : previous);
            sb.append("\n");
            sb.append("Hash of the block:");
            sb.append("\n");
            sb.append(current);
            sb.append("\n");
            sb.append("Block data:");
            if (data == null) {
                sb.append(" no messages");
                sb.append("\n");
            } else {
                sb.append("\n");
                sb.append(data);
            }
            sb.append("Block was generating for ");
            sb.append(generatingTime);
            sb.append(" seconds");
            sb.append("\n");
            sb.append(proofLengthState == 0
                    ? "N stays the same"
                    : proofLengthState < 0
                    ? "N decreased to " + proofLength
                    : "N increased to " + proofLength);
            sb.append("\n");
            return sb.toString();
        }

        public int getId() {
            return id;
        }

        public void validate(Hash previous) {
            var isValid = true;

            isValid &= (this.previous == null && previous == null) || this.previous.equals(previous);
            isValid &= !current.validate(proofLength, getValues());

            if (!isValid) {
                throw new IllegalArgumentException(String.format("Block %s is not valid!", id));
            }
        }

        public <T> T getData() {
            return (T)data;
        }
    }
  learner_created: true
- name: src/blockchain/Transaction.java
  visible: true
  text: |+
    package blockchain;

    import java.io.Serializable;
    import java.security.*;

    public class Message implements Serializable {
        private final int id;
        private final String from;
        private final String text;
        private final PublicKey publicKey;
        private final String signature;

        public Message(int id, String from, String text, PublicKey publicKey, String signature) {
            this.id = id;
            this.from = from;
            this.text = text;
            this.publicKey = publicKey;
            this.signature = signature;
        }

        int getId() {
            return id;
        }

        public String getFrom() {
            return from;
        }

        public String getText() {
            return text;
        }

        public void validate() throws InvalidKeyException, NoSuchAlgorithmException, SignatureException {
            var sig = Signature.getInstance("SHA1withRSA");
            sig.initVerify(publicKey);
            var data = id + from + text;
            sig.update(data.getBytes());
            if (!sig.verify(signature.getBytes())) {
                throw new IllegalArgumentException(String.format("Message %s is not valid!", id));
            }
        }

        @Override
        public String toString() {
            return from + ": " + text;
        }
    }

  learner_created: true
- name: src/blockchain/TransactionList.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.security.InvalidKeyException;
    import java.security.NoSuchAlgorithmException;
    import java.security.SignatureException;
    import java.util.List;
    import java.util.stream.Stream;

    public class MessageList implements Serializable {
        private final List<Message> messages;

        public MessageList(List<Message> messages) {
            this.messages = messages;
        }

        public Stream<Message> messages() {
            return messages.stream();
        }

        public void validate() throws InvalidKeyException, NoSuchAlgorithmException, SignatureException {
            for (var message : messages) {
                message.validate();
            }
        }

        @Override
        public String toString() {
            var sb = new StringBuilder();
            for (var message: messages) {
                sb.append(message);
                sb.append("\n");
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/blockchain/Trader.java
  visible: true
  text: |
    package blockchain;

    import java.io.File;
    import java.nio.file.Files;
    import java.security.*;
    import java.security.spec.InvalidKeySpecException;
    import java.security.spec.PKCS8EncodedKeySpec;
    import java.security.spec.X509EncodedKeySpec;
    import java.util.UUID;
    import java.util.concurrent.TimeUnit;

    public class Chatter implements Runnable {
        private BlockChain blockChain;
        private String name;
        private PublicKey publicKey;
        private PrivateKey privateKey;

        public Chatter(BlockChain blockChain, String name, String publicKeyFile, String privateKeyFile)
                throws Exception {
            this.blockChain = blockChain;
            this.name = name;
            this.publicKey = getPublic(publicKeyFile);
            this.privateKey = getPrivate(privateKeyFile);
        }

        public PrivateKey getPrivate(String filename) throws Exception {
            var keyBytes = Files.readAllBytes(new File(filename).toPath());
            var spec = new PKCS8EncodedKeySpec(keyBytes);
            var kf = KeyFactory.getInstance("RSA");
            return kf.generatePrivate(spec);
        }

        public PublicKey getPublic(String filename) throws Exception {
            var keyBytes = Files.readAllBytes(new File(filename).toPath());
            var spec = new X509EncodedKeySpec(keyBytes);
            var kf = KeyFactory.getInstance("RSA");
            return kf.generatePublic(spec);
        }

        @Override
        public void run() {
            while (true) {
                try {
                    TimeUnit.MILLISECONDS.sleep(1);
                    var messageId = blockChain.getNextMessageId();
                    var text = UUID.randomUUID().toString();
                    var signature = sign(messageId, text);
                    blockChain.queueMessage(new Message(messageId, name, text, publicKey, signature));
                } catch (InterruptedException | NoSuchAlgorithmException |
                         InvalidKeyException | SignatureException e) {
                    e.printStackTrace();
                }
            }
        }

        private String sign(int messageId, String text)
                throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            var rsa = Signature.getInstance("SHA1withRSA");
            rsa.initSign(privateKey);
            var data = messageId + name + text;
            rsa.update(data.getBytes());
            return String.valueOf(rsa.sign());
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/276/implement
status: Solved
record: -1
