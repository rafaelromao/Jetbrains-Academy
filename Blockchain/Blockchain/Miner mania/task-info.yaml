type: edu
custom_name: stage3
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/blockchain/Hash.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.security.MessageDigest;

    public class Hash implements Serializable {

        private static final long serialVersionUID = 1L;

        private final String hash;

        public Hash(String text) {
            this.hash = hash(text);
        }

        private String hash(String input) {
            try {
                var digest = MessageDigest.getInstance("SHA-256");
                var hash = digest.digest(input.getBytes("UTF-8"));
                var hexString = new StringBuilder();
                for (var elem : hash) {
                    var hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        public boolean validate(int proofLength, String input) {
            var proof = hash.substring(0, proofLength).replaceAll("0", "");
            if (!"".equals(proof)) {
                return false;
            }
            return hash.equals(hash(input));
        }

        @Override
        public String toString() {
            return hash;
        }
    }
  learner_created: true
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.io.*;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Stack;

    public class BlockChain implements Serializable {

        private static final long serialVersionUID = 1L;

        public static BlockChain load(int proofLength, String fileName) throws IOException, ClassNotFoundException {
            BlockChain blockChain;
    //        if (Files.exists(Paths.get(fileName))) {
    //            try (var file = new FileInputStream(fileName);
    //                 var buffer = new BufferedInputStream(file);
    //                 var stream = new ObjectInputStream(buffer)) {
    //
    //                blockChain = (BlockChain) stream.readObject();
    //                blockChain.validate();
    //            }
    //        } else {
                blockChain = new BlockChain(proofLength, fileName);
    //        }
            return blockChain;
        }

        private final int proofLength;
        private final String fileName;
        private final Stack<Block> blocks = new Stack<>();

        private BlockChain(int proofLength, String fileName) {
            this.proofLength = proofLength;
            this.fileName = fileName;
        }

        private void validate() {
            if (!blocks.empty()) {
                blocks.get(0).validate(null);
                for (int i = 1; i < blocks.size(); i++) {
                    var block = blocks.get(i);
                    block.validate(blocks.get(i-1).getHash());
                }
            }
        }

        public Block put() throws IOException {
            var id = blocks.size();
            var previous = blocks.size() == 0 ? null : blocks.peek().getHash();
            var block = new Block(id, proofLength, previous);
            blocks.add(block);
            save();
            return block;
        }

        private void save() throws IOException {
            var path = Paths.get(fileName);
            if (Files.exists(path)) {
                Files.delete(path);
            }
            try(var file = new FileOutputStream(fileName);
                var buffer = new BufferedOutputStream(file);
                var stream = new ObjectOutputStream(buffer)) {
                stream.writeObject(this);
            }
        }

        public Iterable<Block> blocks() {
            return this.blocks;
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.time.Duration;

    public class Block implements Serializable {

        private static final long serialVersionUID = 1L;

        private final int id;
        private final int proofLength;
        private final long timestamp;
        private final Hash current;
        private final Hash previous;
        private int magicNumber;
        private transient long generatingTime;

        public Block(int id, int proofLength, Hash hashOfPreviousBlock) {
            this.id = id;
            this.proofLength = proofLength;
            this.timestamp = System.currentTimeMillis();
            this.previous = hashOfPreviousBlock;
            this.current = hash();
        }

        private Hash hash() {
            var start = System.currentTimeMillis();
            try {
                while (true) {
                    magicNumber = (int)(Math.random() * Integer.MAX_VALUE);
                    var hash = new Hash(getValues());
                    if (hash.validate(proofLength, getValues())) {
                        return hash;
                    }
                }
            } finally {
                var end = System.currentTimeMillis();
                generatingTime = Duration.ofMillis(end - start).toSeconds();
            }
        }

        private String getValues() {
            return Integer.toString(magicNumber) + id + timestamp + (previous != null ? previous : 0);
        }

        public Hash getHash() {
            return current;
        }

        public void validate(Hash previous) {
            if (!ValidatePrevious(previous)) {
                return;
            }
            if (!current.validate(proofLength, getValues())) {
                return;
            }
            throw new IllegalArgumentException(String.format("Block %s is not valid!", id));
        }

        private boolean ValidatePrevious(Hash previous) {
            if (this.previous == null && previous == null) {
                return true;
            }
            if (this.previous.equals(previous)) {
                return true;
            }
            return false;
        }

        @Override
        public String toString() {
            var sb = new StringBuilder();
            sb.append("Block:");
            sb.append("\n");
            sb.append("Id: ");
            sb.append(id);
            sb.append("\n");
            sb.append("Timestamp: ");
            sb.append(timestamp);
            sb.append("\n");
            sb.append("Magic number: ");
            sb.append(magicNumber);
            sb.append("\n");
            sb.append("Hash of the previous block:");
            sb.append("\n");
            sb.append(previous == null ? 0 : previous);
            sb.append("\n");
            sb.append("Hash of the block:");
            sb.append("\n");
            sb.append(current);
            sb.append("\n");
            sb.append("Block was generating for ");
            sb.append(generatingTime);
            sb.append(" seconds");
            sb.append("\n");
            return sb.toString();
        }
    }
  learner_created: true
- name: src/blockchain/Miner.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/273/implement
status: Solved
record: -1
