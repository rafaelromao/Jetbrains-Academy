type: edu
custom_name: stage3
files:
- name: test/Clue.java
  visible: false
  text: |
    public class Clue {
        public String output;
        public int threadsStarted;
        public String feedback;

        public Clue(String output, int threadsStarted, String feedback) {
            this.output = output;
            this.threadsStarted = threadsStarted;
            this.feedback = feedback;
        }

    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.Assert;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.function.Function;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;
        private static int startedThreadCount = 0;

        public MainTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    //Testing basic cases
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%PDF-", "PDF document"})
                            .addFile("test_files" + File.separator + "doc.pdf", "PFDF%PDF-PDF")
                            .addFile("test_files" + File.separator + "text.txt", "PF%PDF-PDFABC")
                            .setAttach(new Clue("doc.pdf: PDF document\n" +
                                    "text.txt: PDF document", 2, "The files had following content: " + "\n" +
                                    "\"PFDF%PDF-PDF\", \"PF%PDF-PDFABC\" and were analyzed for pattern \"%PDF-\"")),

                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .addFile("test_files" + File.separator + "file.pdf", "PF%P-----BEGIN\\CERTIFICATE-----DF-PDF")
                            .setAttach(new Clue("file.pdf: PEM certificate\n" +
                                    "file.pem: PEM certificate", 2, "")),

                    //Testing with only one file in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "-----BEGIN\\CERTIFICATE-----", "PEM certificate"})
                            .addFile("test_files" + File.separator + "the_only_file.pem", "PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF")
                            .setAttach(new Clue("the_only_file.pem: PEM certificate", 1, "")),

                    //Testing with 10 files in the directory
                    new TestCase<Clue>()
                            .addArguments(new String[]
                                    {"test_files", "%txt-", "TXT document"})
                            .addFile("test_files" + File.separator + "doc0.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc1.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc2.pdf", "PFDF%PDF%txt-PF")
                            .addFile("test_files" + File.separator + "doc3.pdf", "PF%PF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc4.pdf", "PFDF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc5.pdf", "PF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc6.pdf", "PFF%PDF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc7.pdf", "PF%DF%txt-PDF")
                            .addFile("test_files" + File.separator + "doc8.pdf", "PFDF%PDFPDF")
                            .addFile("test_files" + File.separator + "doc9.txt", "PF%PDF%PDF")
                            .setAttach(new Clue("doc0.pdf: TXT document\n" +
                                    "doc1.pdf: TXT document\n" +
                                    "doc2.pdf: TXT document\n" +
                                    "doc3.pdf: TXT document\n" +
                                    "doc4.pdf: TXT document\n" +
                                    "doc5.pdf: TXT document\n" +
                                    "doc6.pdf: TXT document\n" +
                                    "doc7.pdf: TXT document\n" +
                                    "doc8.pdf: Unknown file type\n" +
                                    "doc9.txt: Unknown file type", 10, ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            long currentThreads = ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
            long startedThisTestThread = currentThreads - startedThreadCount;

            long neededThreads = startedThreadCount + clue.threadsStarted;
            long startedThisTestNeededThreads = neededThreads - startedThreadCount;

            Function<Long, String> threadName = count ->
                    count + " thread" + (count == 1 ? "" : "s");

            if (startedThisTestThread < startedThisTestNeededThreads) {
                return CheckResult.wrong(
                        "There were not enough Threads started, " +
                                "you should process each file in a different Thread. " +
                                "\nYou started " + threadName.apply(startedThisTestThread) + ", " +
                                "but you need to start " + threadName.apply(startedThisTestNeededThreads) + ". " +
                                "\nThe executor.invokeAll() method might help. Also, don't forget to call .shutdown()."
                );
            }
            startedThreadCount = (int) currentThreads;
            String actual = reply.strip();
            if (actual.isEmpty()) {
                actual = "No output (check if you exited " +
                        "from main too early, you should wait until all threads are finishes)";
            }

            String[] expectedLines = clue.output.split("\n");

            for (String expectedLine : expectedLines) {
                if (!actual.contains(expectedLine)) {
                    return new CheckResult(false, "Can't find the line '"
                            + expectedLine + "' in the output!");
                }
            }

            return new CheckResult(true);
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        @BeforeClass
        public static void countThreadsBefore() {
            startedThreadCount += ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + "test_files"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }
  learner_created: false
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    import java.io.FileInputStream;
    import java.io.IOException;

    import static java.lang.System.nanoTime;

    public class Main {
        private static final String UNKNOWN_FILE_TYPE = "Unknown file type";

        public static void main(String[] args) {
            var strategy = args[0];
            var fileName = args[1];
            var pattern = args[2];
            var type = args[3];

            SearchStrategy searchStrategy;
            switch (strategy) {
                case "--naive":
                    searchStrategy = new NaiveSearchStrategy(type);
                    break;
                case "--KMP":
                    searchStrategy = new KMPSearchStrategy(type);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid search strategy: " + strategy);
            }

            var analyzer = new Analyzer(searchStrategy);
            try (var file = new FileInputStream(fileName)) {
                var start = nanoTime();
                var result = analyzer.search(file, pattern);
                result = result == null ? UNKNOWN_FILE_TYPE : result;
                var duration = nanoTime() - start;
                System.out.println(result);
                System.out.println("It took " + (double) duration / 1_000_000_000.0 + " seconds");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: false
- name: src/analyzer/Analyzer.java
  visible: true
  text: |
    package analyzer;

    import java.io.*;

    public class Analyzer {
        private SearchStrategy searchStrategy;

        public Analyzer(SearchStrategy searchStrategy) {
            this.searchStrategy = searchStrategy;
        }

        public String search(InputStream content, String pattern) throws IOException {
            return searchStrategy.search(content, pattern);
        }
    }
  learner_created: false
- name: src/analyzer/SearchStrategy.java
  visible: true
  text: |
    package analyzer;

    import java.io.IOException;
    import java.io.InputStream;

    public interface SearchStrategy {
        String search(InputStream content, String pattern) throws IOException;
    }
  learner_created: false
- name: src/analyzer/NaiveSearchStrategy.java
  visible: true
  text: |
    package analyzer;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;

    public class NaiveSearchStrategy implements SearchStrategy {
        private String type;

        public NaiveSearchStrategy(String type) {
            this.type = type;
        }

        @Override
        public String search(InputStream content, String pattern) throws IOException {
            try (var reader = new InputStreamReader(content);
                 var buffer = new BufferedReader(reader)) {
                var lines = buffer.lines();
                return lines.anyMatch(line -> line.contains(pattern))
                        ? type
                        : null;
            }
        }
    }
  learner_created: false
- name: src/analyzer/KMPSearchStrategy.java
  visible: true
  text: |
    package analyzer;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.util.ArrayList;
    import java.util.List;

    public class KMPSearchStrategy implements SearchStrategy {
        private String type;

        public KMPSearchStrategy(String type) {
            this.type = type;
        }

        @Override
        public String search(InputStream content, String pattern) throws IOException {
            try (var reader = new InputStreamReader(content);
                 var buffer = new BufferedReader(reader)) {
                var lines = buffer.lines();
                return lines.anyMatch(line -> !kmpSearch(line, pattern).isEmpty())
                        ? type
                        : null;
            }
        }

        private static List<Integer> kmpSearch(String text, String pattern) {
            var prefix = prefix(pattern);
            var occurrences = new ArrayList<Integer>();
            var j = 0;
            for (var i = 0; i < text.length(); i++) {
                while (j > 0 && text.charAt(i) != pattern.charAt(j)) {
                    j = prefix[j - 1];
                }
                if (text.charAt(i) == pattern.charAt(j)) {
                    j += 1;
                }
                if (j == pattern.length()) {
                    occurrences.add(i - j + 1);
                    j = prefix[j - 1];
                }
            }
            return occurrences;
        }

        private static int[] prefix(String str) {
            var prefix = new int[str.length()];
            for (var i = 1; i < str.length(); i++) {
                var j = prefix[i - 1];
                while (j > 0 && str.charAt(i) != str.charAt(j)) {
                    j = prefix[j - 1];
                }
                if (str.charAt(i) == str.charAt(j)) {
                    j += 1;
                }
                prefix[i] = j;
            }
            return prefix;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/64/stages/345/implement
status: Solved
record: 4
