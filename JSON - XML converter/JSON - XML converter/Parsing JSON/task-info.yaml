type: edu
custom_name: stage4
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {
        public ConverterTest() throws Exception {
            super(Main.class);
        }

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-000\"\n" +
                    "        },\n" +
                    "        \"empty1\": null,\n" +
                    "        \"empty2\": { },\n" +
                    "        \"empty3\": \"\",\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner12\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner12\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner12\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"this won't be converted\"\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"6753322\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-000\"\n" +
                    "attributes:\n" +
                    "region = \"Russia\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, empty1\n" +
                    "value = null\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, empty2\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, empty3\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key1\n" +
                    "value = \"value1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key2\n" +
                    "value = \"value2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4, inner4\n" +
                    "value = \"value3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, attr1\n" +
                    "value = \"123.456\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, inner4\n" +
                    "value = \"value4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner6\n" +
                    "value = \"value5\"\n" +
                    "attributes:\n" +
                    "attr2 = \"789.321\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner7\n" +
                    "value = \"value6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8, attr3\n" +
                    "value = \"value7\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, attr4\n" +
                    "value = \"value8\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, inner9\n" +
                    "value = \"value9\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, something\n" +
                    "value = \"value10\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner10\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr5 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner11\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, somekey\n" +
                    "value = \"keyvalue\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, inner12\n" +
                    "value = \"notnull\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta, version\n" +
                    "value = \"0.01\""
            );

            allTests.put(
                "{\n" +
                    "    \"root1\": {\n" +
                    "        \"@attr1\": \"val1\",\n" +
                    "        \"@attr2\": \"val2\",\n" +
                    "        \"#root1\": {\n" +
                    "            \"elem1\": {\n" +
                    "                \"@attr3\": \"val3\",\n" +
                    "                \"@attr4\": \"val4\",\n" +
                    "                \"#elem1\": \"Value1\"\n" +
                    "            },\n" +
                    "            \"elem2\": {\n" +
                    "                \"@attr5\": \"val5\",\n" +
                    "                \"@attr6\": \"val6\",\n" +
                    "                \"#elem2\": \"Value2\"\n" +
                    "            }\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"root2\": {\n" +
                    "        \"@attr1\": null,\n" +
                    "        \"@attr2\": \"\",\n" +
                    "        \"#root2\": null\n" +
                    "    },\n" +
                    "    \"root3\": {\n" +
                    "        \"@attr1\": \"val2\",\n" +
                    "        \"@attr2\": \"val1\",\n" +
                    "        \"#root3\": \"\"\n" +
                    "    },\n" +
                    "    \"root4\": \"Value4\"\n" +
                    "}",

                "Element:\n" +
                    "path = root1\n" +
                    "attributes:\n" +
                    "attr1 = \"val1\"\n" +
                    "attr2 = \"val2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem1\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "attr3 = \"val3\"\n" +
                    "attr4 = \"val4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem2\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "attr5 = \"val5\"\n" +
                    "attr6 = \"val6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root2\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr1 = \"\"\n" +
                    "attr2 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root3\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "attr1 = \"val2\"\n" +
                    "attr2 = \"val1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root4\n" +
                    "value = \"Value4\""
            );

            allTests.put("{\"root1\":{\"@attr1\":\"val1\"," +
                "\"@attr2\":\"val2\",\"#root1\":{\"elem1\":{\"" +
                "@attr3\":\"val3\",\"@attr4\":\"val4\",\"#ele" +
                "m1\":\"Value1\"},\"elem2\":{\"@attr5\":\"val" +
                "5\",\"@attr6\":\"val6\",\"#elem2\":\"Value2\"" +
                "}}},\"root2\":{\"@attr1\":null,\"@attr2\":\"" +
                "\",\"#root2\":null},\"root3\":{\"@attr1\":\"" +
                "val2\",\"@attr2\":\"val1\",\"#root3\":\"\"}," +
                "\"root4\":\"Value4\"}",


                "Element:\n" +
                    "path = root1\n" +
                    "attributes:\n" +
                    "attr1 = \"val1\"\n" +
                    "attr2 = \"val2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem1\n" +
                    "value = \"Value1\"\n" +
                    "attributes:\n" +
                    "attr3 = \"val3\"\n" +
                    "attr4 = \"val4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root1, elem2\n" +
                    "value = \"Value2\"\n" +
                    "attributes:\n" +
                    "attr5 = \"val5\"\n" +
                    "attr6 = \"val6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root2\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr1 = \"\"\n" +
                    "attr2 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root3\n" +
                    "value = \"\"\n" +
                    "attributes:\n" +
                    "attr1 = \"val2\"\n" +
                    "attr2 = \"val1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = root4\n" +
                    "value = \"Value4\""
            );

            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"13243547\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"USA\",\n" +
                    "            \"#number\": \"8-900-000-999\"\n" +
                    "        },\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner12\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner12\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner12\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"this won't be converted\"\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "Element:\n" +
                    "path = transaction\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, id\n" +
                    "value = \"13243547\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, number\n" +
                    "value = \"8-900-000-999\"\n" +
                    "attributes:\n" +
                    "region = \"USA\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key1\n" +
                    "value = \"value1\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner1, inner2, inner3, key2\n" +
                    "value = \"value2\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner4, inner4\n" +
                    "value = \"value3\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, attr1\n" +
                    "value = \"123.456\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner5, inner4\n" +
                    "value = \"value4\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner6\n" +
                    "value = \"value5\"\n" +
                    "attributes:\n" +
                    "attr2 = \"789.321\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner7\n" +
                    "value = \"value6\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner8, attr3\n" +
                    "value = \"value7\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, attr4\n" +
                    "value = \"value8\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, inner9\n" +
                    "value = \"value9\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner9, something\n" +
                    "value = \"value10\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner10\n" +
                    "value = null\n" +
                    "attributes:\n" +
                    "attr5 = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner11\n" +
                    "value = \"\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, somekey\n" +
                    "value = \"keyvalue\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = transaction, inner12, inner12\n" +
                    "value = \"notnull\"\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta\n" +
                    "\n" +
                    "Element:\n" +
                    "path = meta, version\n" +
                    "value = \"0.01\""
            );
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));

                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            List<String> userLines = user
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            List<String> answerLines = answer
                .lines()
                .map(String::strip)
                .map(e -> e.replaceAll("\\s+", " "))
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (userLines.size() < answerLines.size()) {

                LinkedHashSet<String> answerSet = new LinkedHashSet<>();
                answerSet.addAll(answerLines);
                for (String line : userLines) {
                    answerSet.remove(line);
                }
                if (!answerSet.isEmpty()) {
                    String notFoundLine = answerSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not found in output:\n" + notFoundLine);
                }
                return new CheckResult(false);

            } else if (userLines.size() > answerLines.size()) {

                LinkedHashSet<String> userSet = new LinkedHashSet<>();
                userSet.addAll(answerLines);
                for (String line : answerLines) {
                    userSet.remove(line);
                }
                if (!userSet.isEmpty()) {
                    String excessLine = userSet.stream().findFirst().get();
                    return new CheckResult(false,
                        "The following line is not needed in output:\n" + excessLine);
                }
                return new CheckResult(false);

            } else {

                for (int i = 0; i < userLines.size(); i++) {

                    String userLine = userLines.get(i);
                    String answerLine = answerLines.get(i);

                    if (!userLine.equals(answerLine)) {
                        return new CheckResult(false,
                            "The following line was expected:\n" + answerLine + "\n" +
                                "The following line was given:\n" + userLine);
                    }
                }

                return CheckResult.correct();
            }
        }
    }
  learner_created: false
- name: src/converter/XML2JSONConverter.java
  visible: true
  text: |
    package converter;

    import org.jetbrains.annotations.NotNull;

    import java.io.PrintStream;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.regex.Pattern;
    import java.util.stream.Stream;

    import static java.util.stream.Collectors.toList;

    class XML2JSONConverter implements Converter {
        private Pattern simpleElementPattern = Pattern.compile("\\s*\\<(.*?)\\/\\>\\s*");
        private Pattern elementNameAndAttributesPattern = Pattern.compile("\\<?\\/?(\\w*)(.*)($|\\>)");
        private Pattern attributesPartsPattern = Pattern.compile("\\s*(\\w*)\\s*=\\s*\\\"(\\w*)\\\"\\s*");
        private Pattern elementStartingPattern = Pattern.compile("\\s*\\<\\/?(.*?)\\/?\\>\\s*");
        private Pattern elementContentPattern = Pattern.compile("\\>(.*)\\<");
        private Pattern elementsPartsPattern = Pattern.compile("(\\<.*?\\>)|(.+?(?=\\<|$))");
        private Pattern elementClosingPattern = Pattern.compile("\\<\\/(.*?)\\>|\\<(.*?)\\/\\>");
        private StringBuilder builder = new StringBuilder();
        private PrintStream out;

        @Override
        public String convert(String content) {
            writeBeginObject();
            var elements = readElements(content
                    .replace("\r", "")
                    .replace("\n", ""));
            var keyValuePair = readElement(elements.get(0));
            writeRecursively(null,
                    keyValuePair[0],
                    keyValuePair[1],
                    keyValuePair[2]);
            writeEndObject();
            return builder.toString();
        }

        @Override
        public void logTo(PrintStream out) {
            this.out = out;
        }

        private void println(String fmt, String... params) {
            if (out != null) {
                out.printf(fmt + "\n", params);
            }
        }

        private List<String> readElements(String elements) {
            var result = new ArrayList<String>();
            var partsMatcher = elementsPartsPattern.matcher(elements);
            partsMatcher.find();
            var parts = Stream.concat(
                    Stream.of(partsMatcher.group().strip()),
                    partsMatcher.results().map(r -> r.group().strip()))
                    .filter(r -> r.length() > 0)
                    .collect(toList());
            var currentElement = new StringBuilder();
            var currentElementName = "";
            for (var part : parts) {
                // If starting element
                var isOpeningTag = currentElement.length() == 0;
                if (isOpeningTag) {
                    var elementNameAndAttributesMatcher = elementNameAndAttributesPattern.matcher(part);
                    if (elementNameAndAttributesMatcher.find()) {
                        currentElementName = elementNameAndAttributesMatcher.group(1);
                    }
                }
                // If literal
                var isLiteral = !part.contains("<");
                if (isLiteral) {
                    var isInElement = currentElement.length() > 0;
                    if (isInElement) {
                        currentElement.append(part);
                    } else {
                        result.add(part);
                        currentElement.setLength(0);
                    }
                    continue;
                }
                // At this point, the part will compose the current element no matter what
                currentElement.append(part);
                // If closing element
                var closingMatcher = elementClosingPattern.matcher(part);
                var isClosingTag = closingMatcher.find();
                if (isClosingTag) {
                    var elementNameAndAttributesMatcher = elementNameAndAttributesPattern.matcher(part);
                    if (elementNameAndAttributesMatcher.find()) {
                        var closingElementName = elementNameAndAttributesMatcher.group(1);
                        if (currentElementName.equals(closingElementName)) {
                            result.add(currentElement.toString());
                            currentElement.setLength(0);
                        }
                    }
                }
            }
            return result;
        }

        private String[] readElement(String element) {
            var elementMatcher = elementContentPattern.matcher(element);
            if (!elementMatcher.find()) {
                var tagMatcher = simpleElementPattern.matcher(element);
                tagMatcher.find();
                var tag = tagMatcher.group(1);
                var nameAndAttributes = extractNameAndAttributes(tag);
                return new String[]{nameAndAttributes[0], null, nameAndAttributes[1].strip()};
            } else {
                var tagMatcher = elementStartingPattern.matcher(element);
                tagMatcher.find();
                var tag = tagMatcher.group(1);
                var nameAndAttributes = extractNameAndAttributes(tag);
                var content = extractContent(element);
                return new String[]{nameAndAttributes[0], content, nameAndAttributes[1].strip()};
            }
        }

        @NotNull
        private String extractContent(String element) {
            var contentMatcher = elementContentPattern.matcher(element);
            contentMatcher.find();
            var content = contentMatcher.group(1);
            content = content == null ? "null" : content;
            return content;
        }

        @NotNull
        private String[] extractNameAndAttributes(String tag) {
            var nameAndAttributes = new String[2];
            var nameAndAttributesMatcher = elementNameAndAttributesPattern.matcher(tag);
            nameAndAttributesMatcher.find();
            nameAndAttributes[0] = nameAndAttributesMatcher.group(1);
            nameAndAttributes[1] = nameAndAttributesMatcher.groupCount() == 3
                    ? nameAndAttributesMatcher.group(2)
                    : null;
            return nameAndAttributes;
        }

        private void writeRecursively(String parentPath, String name, String content, String attributes) {
            var elementType = ValueType.of(content);
            if (attributes != null && attributes.length() > 0) {
                elementType = ValueType.OBJECT;
            }
            switch (elementType) {
                case LITERAL:
                case STRING:
                    writeString(parentPath, name, content);
                    break;
                case OBJECT:
                    writeObject(parentPath, name, content, attributes);
            }
        }

        private void writeObject(String parentPath, String name, String value, String attributes) {
            var path = computePath(parentPath, name);
            logElement(path, name, value, attributes);

            builder.append("\"");
            builder.append(name);
            builder.append("\"");
            builder.append(":");
            var valueType = ValueType.of(value);
            var children = valueType == ValueType.LITERAL || valueType == ValueType.STRING
                    ? List.<String[]>of()
                    : readElements(value.strip())
                    .stream()
                    .map(this::readElement)
                    .collect(toList());
            if (children.size() > 0 || (attributes != null && attributes.length() > 0)) {
                valueType = ValueType.OBJECT;
            }
            if (children.size() > 1 && (attributes == null || attributes.length() == 0)) {
                valueType = ValueType.ARRAY;
            }
            if (attributes != null && attributes.length() > 0) {
                var element = new ArrayList<String[]>();
                element.add(new String[]{"#" + name, value, null});
                var attrs = readAttributes(attributes);
                children = Stream
                        .of(element.stream(), attrs.stream())
                        .reduce(Stream::concat)
                        .get()
                        .collect(toList());
            }
            switch (valueType) {
                case OBJECT:
                    writeBeginObject();
                    break;
                case ARRAY:
                    writeBeginArray();
                    break;
            }
            for (var i = 0; i < children.size(); i++) {
                if (valueType == ValueType.ARRAY) {
                    writeBeginObject();
                }
                var keyValuePair = children.get(i);
                writeRecursively(path,
                        keyValuePair[0],
                        keyValuePair[1],
                        keyValuePair[2]);
                if (valueType == ValueType.ARRAY) {
                    writeEndObject();
                }
                if (i < children.size() - 1) {
                    builder.append(",");
                }
            }
            switch (valueType) {
                case OBJECT:
                    writeEndObject();
                    break;
                case ARRAY:
                    writeEndArray();
                    break;
            }
        }

        private void logElement(String path, String name, String value, String attributes) {
            if (!name.startsWith("#") && !name.startsWith("@")) {
                println("Element:");
                println("path = %s", path);
                var valueType = ValueType.of(value);
                switch (valueType) {
                    case STRING:
                        println("value = \"%s\"", value);
                        break;
                    case LITERAL:
                        println("value = %s", value);
                        break;
                }
                if (attributes != null && attributes.length() > 0) {
                    println("attributes:");
                    var attrs = readAttributes(attributes);
                    for (var attr : attrs) {
                        println("%s = \"%s\"", attr[0].substring(1), attr[1]);
                    }
                }
                println("");
            }
        }

        private String computePath(String parent, String name) {
            return name.startsWith("#")
                    ? parent
                    : parent != null
                    ? parent + ", " + name
                    : name;
        }

        private List<String[]> readAttributes(String attributes) {
            var result = new ArrayList<String[]>();
            var matcher = attributesPartsPattern.matcher(attributes);
            while (matcher.find()) {
                result.add(new String[]{"@" + matcher.group(1), matcher.group(2), null});
            }
            return result;
        }

        private void writeString(String parentPath, String name, String value) {
            var path = computePath(parentPath, name);
            logElement(path, name, value, null);

            builder.append("\"");
            builder.append(name);
            builder.append("\"");
            builder.append(":");
            if (value == null) {
                builder.append("null");
            } else {
                builder.append("\"");
                builder.append(value);
                builder.append("\"");
            }
        }

        private void writeBeginObject() {
            builder.append("{");
        }

        private void writeEndObject() {
            builder.append("}");
        }

        private void writeBeginArray() {
            builder.append("[");
        }

        private void writeEndArray() {
            builder.append("]");
        }

        private enum ValueType {
            OBJECT,
            ARRAY,
            STRING,
            LITERAL;

            public static ValueType of(String valueType) {
                if (valueType == null || valueType.equals("null")) return ValueType.LITERAL;
                if (valueType.length() == 0 || valueType.charAt(0) == '"') return ValueType.STRING;
                if (valueType.charAt(0) == '<') return ValueType.OBJECT;
                return ValueType.STRING;
            }
        }
    }
  learner_created: true
- name: src/converter/Converter.java
  visible: true
  text: |
    package converter;

    import java.io.PrintStream;

    interface Converter {

        String convert(String content);

        void logTo(PrintStream out);

        class Factory {
            public static Converter createFor(String input) {
                return input.charAt(0) == '<' ? new XML2JSONConverter() : new JSON2XMLConverter();
            }
        }
    }
  learner_created: true
- name: src/converter/Tests.java
  visible: true
  text: |
    package converter;

    import org.junit.Assert;
    import org.junit.Test;

    public class Tests {
        @Test
        public void xml2json_simpleContent_noAttributes() {
            var input = "<employee>Garry Smith</employee>";
            var expected = "{\"employee\":\"Garry Smith\"}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
        @Test
        public void xml2json_simpleContent_singleAttribute() {
            var input = "<employee department = \"finance\">Garry Smith</employee>";
            var expected = "{\"employee\":{\"#employee\":\"Garry Smith\",\"@department\":\"finance\"}}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
        @Test
        public void xml2json_simpleObjectContent_noAttributes() {
            var input = "<employee><item>Garry Smith</item></employee>";
            var expected = "{\"employee\":{\"item\":\"Garry Smith\"}}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
        @Test
        public void xml2json_simpleObjectContent_singleAttribute() {
            var input = "<employee department = \"finance\"><item>Garry Smith</item></employee>";
            var expected = "{\"employee\":{\"#employee\":{\"item\":\"Garry Smith\"},\"@department\":\"finance\"}}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
        @Test
        public void xml2json_multipleSimpleObjectsContent_noAttributes() {
            var input = "<employee><item>Garry Smith</item><item>test</item></employee>";
            var expected = "{\"employee\":[{\"item\":\"Garry Smith\"},{\"item\":\"test\"}]}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
        @Test
        public void xml2json_multipleSimpleObjectsContent_singleAttribute() {
            var input = "<employee department = \"finance\"><item>Garry Smith</item><item>test</item></employee>";
            var expected = "{\"employee\":{\"#employee\":[{\"item\":\"Garry Smith\"},{\"item\":\"test\"}],\"@department\":\"finance\"}}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
        @Test
        public void xml2json_complexObject() {
            var input = "<node>\n" +
                    "    <child name = \"child_name1\" type = \"child_type1\">\n" +
                    "        <subchild id = \"1\" auth=\"auth1\">Value1</subchild>\n" +
                    "    </child>\n" +
                    "    <child name = \"child_name2\" type = \"child_type2\">\n" +
                    "        <subchild id = \"2\" auth=\"auth1\">Value2</subchild>\n" +
                    "        <subchild id = \"3\" auth=\"auth2\">Value3</subchild>\n" +
                    "        <subchild id = \"4\" auth=\"auth3\"></subchild>\n" +
                    "        <subchild id = \"5\" auth=\"auth3\"/>\n" +
                    "    </child>\n" +
                    "</node>";
            var expected = "{\"node\":[{\"child\":{\"#child\":{\"subchild\":{\"#subchild\":\"Value1\",\"@id\":\"1\",\"@auth\":\"auth1\"}},\"@name\":\"child_name1\",\"@type\":\"child_type1\"}},{\"child\":{\"#child\":[{\"subchild\":{\"#subchild\":\"Value2\",\"@id\":\"2\",\"@auth\":\"auth1\"}},{\"subchild\":{\"#subchild\":\"Value3\",\"@id\":\"3\",\"@auth\":\"auth2\"}},{\"subchild\":{\"#subchild\":\"\",\"@id\":\"4\",\"@auth\":\"auth3\"}},{\"subchild\":{\"#subchild\":null,\"@id\":\"5\",\"@auth\":\"auth3\"}}],\"@name\":\"child_name2\",\"@type\":\"child_type2\"}}]}";
            var converter = Converter.Factory.createFor(input);
            var output = converter.convert(input);
            Assert.assertEquals(expected, output);
        }
    }
  learner_created: true
- name: src/converter/JSON2XMLConverter.java
  visible: true
  text: |
    package converter;

    import java.io.PrintStream;
    import java.util.Arrays;
    import java.util.regex.Pattern;

    class JSON2XMLConverter implements Converter {
        private Pattern objectPattern = Pattern.compile("\\s*\\{\\s*(.*)\\s*\\}\\s*");
        private Pattern propertyNamePattern = Pattern.compile("\\s*\"([\\w|@|#]*)\"\\s*:\\s*");
        private Pattern propertyValuePattern = Pattern.compile("\\s*:\\s*\"*(.*)[$|\"?\\s*]");
        private Pattern propertiesPattern = Pattern.compile("(?!\\B\\{[^\\}]*),(?![^\\{]*\\}\\B)");
        private StringBuilder builder = new StringBuilder();
        private PrintStream out;

        @Override
        public String convert(String content) {
            var value = readContent(content);
            var properties = propertiesPattern.split(value);
            var keyValuePair = readProperty(properties[0]);
            writeRecursively(keyValuePair[0], keyValuePair[1]);
            return builder.toString();
        }

        @Override
        public void logTo(PrintStream out) {
            this.out = out;
        }

        private void println(String fmt, String... params) {
            if (out != null) {
                out.printf(fmt + "\n", params);
            }
        }

        private String readContent(String content) {
            var objectMatcher = objectPattern.matcher(content.replaceAll("\\s", ""));
            objectMatcher.find();
            return objectMatcher.group(1);
        }

        private String[] readProperty(String content) {
            content = !content.strip().endsWith("\"") ? content.strip() + "\n" : content.strip();
            var keyMatcher = propertyNamePattern.matcher(content);
            keyMatcher.find();
            var key = keyMatcher.group(1);
            var valueMatcher = propertyValuePattern.matcher(content);
            valueMatcher.find();
            var value = valueMatcher.group(1).strip();
            value = "null".equals(value) ? null : value;
            return new String[]{key, value};
        }

        private void writeRecursively(String name, String value, String... attributes) {
            var elementType = ElementType.of(value);
            switch (elementType) {
                case LITERAL:
                case STRING:
                    writeLiteral(name, value, attributes);
                    break;
                case OBJECT:
                    writeElement(name, value);
            }
        }

        private void writeElement(String name, String value) {
            var properties = propertiesPattern.split(readContent(value));
            var content = Arrays.stream(properties)
                    .filter(p -> p.startsWith("\"#"))
                    .findAny();
            var attributes = Arrays.stream(properties)
                    .filter(p -> p.startsWith("\"@"))
                    .toArray(String[]::new);
            var elements = Arrays.stream(properties)
                    .filter(p -> !p.startsWith("\"@") && !p.startsWith("\"#"))
                    .toArray(String[]::new);
            if (!content.isPresent() && elements.length == 0) {
                writeSimpleElement(name, attributes);
            } else {
                writeBeginElement(name, attributes);
                if (content.isPresent()) {
                    writeValue(readProperty(content.get())[1]);
                }
                for (var element : elements) {
                    var keyValuePair = readProperty(element);
                    writeRecursively(keyValuePair[0], keyValuePair[1]);
                }
                writeEndElement(name);
            }
        }

        private void writeLiteral(String name, String value, String... attributes) {
            if (value == null || value.length() == 0) {
                writeSimpleElement(name, attributes);
            } else {
                writeBeginElement(name, attributes);
                writeValue(value);
                writeEndElement(name);
            }
        }

        private void writeBeginElement(String elementName, String... attributes) {
            builder.append("<");
            builder.append(elementName.startsWith("#") ? elementName.substring(1) : elementName);
            writeAttributes(attributes);
            builder.append(">");
        }

        private void writeEndElement(String elementName) {
            builder.append("</");
            builder.append(elementName.startsWith("#") ? elementName.substring(1) : elementName);
            builder.append(">");
        }

        private void writeSimpleElement(String elementName, String... attributes) {
            builder.append("<");
            builder.append(elementName.startsWith("#") ? elementName.substring(1) : elementName);
            writeAttributes(attributes);
            builder.append("/>");
        }

        private void writeAttributes(String[] attributes) {
            if (attributes.length > 0) {
                builder.append(" ");
                for (var i = 0; i < attributes.length; i++) {
                    String attribute = attributes[i];
                    writeAttribute(attribute);
                    if (i < attributes.length - 1) {
                        builder.append(" ");
                    }
                }
            }
        }

        private void writeAttribute(String attribute) {
            var keyValuePair = attribute.replace("\"", "").split(":");
            builder.append(keyValuePair[0].strip().substring(1));
            builder.append(" = ");
            builder.append("\"");
            builder.append(keyValuePair[1].strip());
            builder.append("\"");
        }

        private void writeValue(String value) {
            builder.append(value == null ? "" : value);
        }

        private enum ElementType {
            OBJECT,
            ARRAY,
            STRING,
            LITERAL;

            public static ElementType of(String elementValue) {
                if (elementValue.charAt(0) == '{') return ElementType.OBJECT;
                if (elementValue.charAt(0) == '[') return ElementType.ARRAY;
                if (elementValue.charAt(0) == '"') return ElementType.STRING;
                return ElementType.LITERAL;
            }
        }
    }
  learner_created: true
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class Main {
        public static void main(String[] args) throws IOException {
            var input = Files.readString(Path.of("test.txt"));
            var converter = Converter.Factory.createFor(input);
            converter.logTo(System.out);
            converter.convert(input);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/61/stages/332/implement
status: Failed
record: -1
