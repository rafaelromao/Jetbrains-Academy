type: edu
custom_name: stage3
files:
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.v6.stage.BaseStageTest;\n\
    import org.hyperskill.hstest.v6.testcase.CheckResult;\nimport org.hyperskill.hstest.v6.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends BaseStageTest<TestClue> {\n\n    public ContactsTest()\
    \ throws Exception {\n        super(Main.class);\n    }\n\n    private CheckResult\
    \ splitActionsFeedback(int actualSize, String... actions) {\n        if (actualSize\
    \ != actions.length) {\n            return CheckResult.FALSE(String.format(\"\
    This test should contain %d actions: %s. \" +\n                            \"\
    You should separate your actions with an empty line.\",\n                    actions.length,\n\
    \                    String.join(\", \", actions)));\n        } else {\n     \
    \       return null;\n        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>>\
    \ generate() {\n        return List.of (\n            new TestCase<TestClue>()\n\
    \                .setInput(\"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"enter action\")) {\n                      \
    \  return new CheckResult(false,\n                            \"I didn't see where\
    \ \\\"Enter action\\\" part in the responsesFromClient\");\n                 \
    \   }\n                    return CheckResult.TRUE;\n                })),\n\n\
    \            new TestCase<TestClue>()\n                .setInput(\n          \
    \          \"count\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"0 records\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    0 records\\\" part \" +\n                                \"in the responsesFromClient\
    \ in a place where it should be\");\n                    }\n                 \
    \   return CheckResult.TRUE;\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"edit\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"no records to edit\")) {\n       \
    \                 return new CheckResult(false,\n                            \"\
    No \\\"No records to edit\\\" part \" +\n                                \"in\
    \ the responsesFromClient in a place where it should be\");\n                \
    \    }\n                    return CheckResult.TRUE;\n                })),\n\n\
    \            new TestCase<TestClue>()\n                .setInput(\n          \
    \          \"count\\n\" +\n                    \"remove\\n\" +\n             \
    \       \"exit\")\n                .setAttach(new TestClue(output -> {\n     \
    \               output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" part \" +\n                                \"in the responsesFromClient in\
    \ a place where it should be\");\n                    }\n                    return\
    \ CheckResult.TRUE;\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.TRUE;\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.TRUE;\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"organization\\n\" +\n              \
    \          \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n\
    \                        \"+0 (123) 456-789-9999\\n\" +\n                    \"\
    info\\n\" +\n                        \"1\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n      \
    \                  || !infoBlock.contains(\"Address: Wall St. 1\")\n         \
    \               || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\")\n  \
    \                      || !infoBlock.contains(\"Time created:\")\n           \
    \             || !infoBlock.contains(\"Time last edit:\")) {\n               \
    \         return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.TRUE;\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"person\\n\" +\n                        \"John\\\
    n\" +\n                        \"Smith\\n\" +\n                        \"\\n\"\
    \ +\n                        \"\\n\" +\n                        \"123 456 789\\\
    n\" +\n                    \"edit\\n\" +\n                        \"1\\n\" +\n\
    \                        \"gender\\n\" +\n                        \"M\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.TRUE;\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.TRUE;\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"person\\n\" +\n                        \"John2\\\
    n\" +\n                        \"Smith2\\n\" +\n                        \"\\n\"\
    \ +\n                        \"\\n\" +\n                        \"123 456 789\\\
    n\" +\n                    \"edit\\n\" +\n                        \"1\\n\" +\n\
    \                        \"number\\n\" +\n                        \"321 654 978\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.TRUE;\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.TRUE;\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"edit\\n\" +\n                   \
    \     \"1\\n\" +\n                        \"number\\n\" +\n                  \
    \      \"+0 (123) 456-789-12345\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n  \
    \                      || !infoBlock.contains(\"Address: Wall St. 1\")\n     \
    \                   || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.TRUE;\n                }))\n        );\n    }\n\n\
    \    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: lombok.config
  visible: true
  learner_created: true
- name: src/contacts/services/ContactService.java
  visible: true
  learner_created: true
- name: src/contacts/services/OrganizationService.java
  visible: true
  learner_created: true
- name: src/contacts/services/PersonService.java
  visible: true
  learner_created: true
- name: src/contacts/models/Organization.java
  visible: true
  learner_created: true
- name: src/contacts/models/Person.java
  visible: true
  learner_created: true
- name: src/contacts/models/Contact.java
  visible: true
  text: |
    package contacts;

    import lombok.Getter;
    import lombok.Setter;

    public class Contact {
        @Getter @Setter
        private String name;
        @Getter @Setter
        private String surname;
        @Getter
        private String phone;

        public Contact() {
            phone = "";
        }

        public void setPhone(String phone) {
            if (validatePhone(phone)) {
                this.phone = phone;
            } else {
                this.phone = "";
            }
        }

        private boolean validatePhone(String phone) {
            final String regex = "^(?:(?:^\\+?[0-9a-zA-Z]{0,}){1,})?(?:[ \\-]?\\(?[0-9a-zA-Z]{2,}\\)?)?(?:[ \\-]{1}[0-9a-zA-Z]{2,}){0,}$";
            return phone.matches(regex);
        }

        @Override
        public String toString() {
            var p = phone == "" ? "[no number]" : phone;
            return String.format("%s %s, %s", name, surname, p);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/230/implement
status: Solved
record: 3
