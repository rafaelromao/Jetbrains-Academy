type: edu
custom_name: stage3
files:
- name: test/ReadabilityTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import readability.Main;

    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        int words;
        int sentences;
        int characters;

        double score;
        String age;

        TestClue(int words, int chars, int sentences, double score, String age) {
            this.words = words;
            this.sentences = sentences;
            this.characters = chars;
            this.score = score;
            this.age = age;
        }
    }


    public class ReadabilityTest extends BaseStageTest<TestClue> {

        public ReadabilityTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>().setAttach(new TestClue(
                    108,
                    580,
                    6,
                    12.86,
                    "18-24"))
                    .addFile("input.txt",
                    "Readability is " +
                        "the ease with which a reader can " +
                        "understand a written text. In natural " +
                        "language, the readability of text depends " +
                        "on its content and its presentation. " +
                        "Researchers have used various factors " +
                        "to measure readability. Readability is " +
                        "more than simply legibility, which is a " +
                        "measure of how easily a reader can distinguish " +
                        "individual letters or characters from each other. " +
                        "Higher readability eases reading effort and speed " +
                        "for any reader, but it is especially important for " +
                        "those who do not have high reading comprehension. " +
                        "In readers with poor reading comprehension, raising " +
                        "the readability level of a text from mediocre to good " +
                        "can make the difference between success and failure")
                    .addArguments("input.txt"),

                new TestCase<TestClue>().setAttach(new TestClue(
                    100,
                    476,
                    10,
                    5.98,
                    "11-12"))
                    .addFile("in.txt",
                    "This is the page of the Simple English Wikipedia. " +
                        "A place where people work together to write encyclopedias " +
                        "in different languages. That includes children and adults " +
                        "who are learning English. There are 142,262 articles on the " +
                        "Simple English Wikipedia. All of the pages are free to use. " +
                        "They have all been published under both the Creative Commons" +
                        " License 3 and the GNU Free Documentation License. " +
                        "You can help here! You may change these pages and make new " +
                        "pages. Read the help pages and other good pages to learn " +
                        "how to write pages here. You may ask questions at Simple talk.")
                    .addArguments("in.txt"),

                new TestCase<TestClue>().setAttach(new TestClue(
                    180,
                    982,
                    13,
                    11.19,
                    "16-17"))
                    .addFile("in.txt",
                    "Gothic architecture are building designs, " +
                        "as first pioneered in Western Europe in the Middle Ages. " +
                        "It began in France in the 12th century. The Gothic style " +
                        "grew out of Romanesque architecture. It lasted until the " +
                        "16th century. By that time the Renaissance style of " +
                        "architecture had become popular. The important features " +
                        "of Gothic architecture are the pointed arch, the ribbed " +
                        "vault, the flying buttress, and stained glass windows " +
                        "which are explained below. Gothic architecture is best " +
                        "known as the style of many " +
                        "of the great cathedrals, abbeys and churches of Europe. " +
                        "It is also the architecture of many castles, palaces, " +
                        "town halls, universities, and also some houses. " +
                        "Many church buildings still remain from this period. " +
                        "Even the smallest Gothic churches are often very beautiful, " +
                        "while many of the larger churches and cathedrals are " +
                        "thought to be priceless works of art. Many are listed " +
                        "with the United Nations Educational, Scientific and " +
                        "Cultural Organization (UNESCO) as World Heritage Sites. " +
                        "In the 19th century, the Gothic style became popular " +
                        "again, particularly for building churches and universities. " +
                        "This style is called Gothic Revival architecture.")
                    .addArguments("in.txt")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {

            boolean foundWords = false;
            boolean foundSentences = false;
            boolean foundChars = false;
            boolean foundScore = false;
            boolean foundAge = false;

            for (Object lineObj : reply.lines().toArray()) {
                String line = (String) lineObj;
                line = line.toLowerCase();
                if (line.contains("words:")) {
                    foundWords = true;
                    if (!line.contains(String.valueOf(clue.words))) {
                        return new CheckResult(false, "Wrong number of words");
                    }
                }
                if (line.contains("sentences:")) {
                    foundSentences = true;
                    if (!line.contains(String.valueOf(clue.sentences))) {
                        return new CheckResult(false, "Wrong number of sentences");
                    }
                }
                if (line.contains("characters:")) {
                    foundChars = true;
                    if (!line.contains(String.valueOf(clue.characters))) {
                        return new CheckResult(false, "Wrong number of characters");
                    }
                }
                if (line.contains("score is:")) {
                    foundScore = true;
                    double actualScore = Double.parseDouble(line.split(":")[1]);
                    if (abs(actualScore - clue.score) > 0.2) {
                        return new CheckResult(false, "Wrong score");
                    }
                }
                if (line.contains("year olds")) {
                    foundAge = true;
                    if (!line.contains(clue.age)) {
                        return new CheckResult(false, "Wrong age");
                    }
                }
            }

            if (!foundWords) {
                return new CheckResult(false, "There is no words amount");
            }

            if (!foundSentences) {
                return new CheckResult(false, "There is no sentences amount");
            }

            if (!foundChars) {
                return new CheckResult(false, "There is no characters amount");
            }

            if (!foundScore) {
                return new CheckResult(false, "There is no score in output");
            }

            if (!foundAge) {
                return new CheckResult(false, "There is no age in output");
            }

            return CheckResult.TRUE;
        }
    }
  learner_created: false
- name: src/readability/Main.java
  visible: true
  text: |
    package readability;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;

    import static java.util.stream.Collectors.*;

    public class Main {
        static final int[] ages = new int[] {
                6, 7, 9, 10, 11, 12, 13,
                14, 15, 16, 17, 18, 24, 25
        };
        public static void main(String[] args) throws IOException {
            var path = Paths.get(args[0]);
            var content = Files.readString(path);
            var sentences = Arrays
                    .stream(content.split("\\.|\\?|!"))
                    .count();
            var characters = content
                    .chars()
                    .filter(c -> !Character.isWhitespace(c))
                    .count();
            var listOfWords = Arrays
                    .stream(content.split("\\.|\\?|!| "))
                    .filter(s -> s.strip().length() > 0)
                    .collect(toList());
            var words = listOfWords
                    .stream()
                    .count();
            var syllables = listOfWords
                    .stream()
                    .mapToInt(w -> countSyllables(w))
                    .sum();
            var polysyllables = listOfWords
                    .stream()
                    .mapToInt(w -> countSyllables(w))
                    .filter(c -> c > 2)
                    .count();

            System.out.println("ListOfW: " + listOfWords);
            System.out.println("Words: " + words);
            System.out.println("Sentences: " + sentences);
            System.out.println("Characters: " + characters);
            System.out.println("Syllables: " + syllables);
            System.out.println("Polysyllables: " + polysyllables);
            try (Scanner scanner = new Scanner(System.in)) {
                System.out.println("Enter the score you want to calculate (ARI, FK, SMOG, CL, all):");
                var option = scanner.nextLine();
                var averageAge = 0f;
                if (option.equals("all")) {
                    averageAge += printScore("ARI", sentences, characters, words, syllables, polysyllables);
                    averageAge += printScore("FK", sentences, characters, words, syllables, polysyllables);
                    averageAge += printScore("SMOG", sentences, characters, words, syllables, polysyllables);
                    averageAge += printScore("CL", sentences, characters, words, syllables, polysyllables);
                    averageAge /= 4;
                } else {
                    averageAge = printScore(option, sentences, characters, words, syllables, polysyllables);
                }
                System.out.printf("This text should be understood in average by %.02f year olds.", averageAge);
            }
        }

        private static int printScore(String option, long sentences, long characters, long words, long syllables, long polysyllables) {
            String method = null;
            double score = 0;
            switch (option) {
                case "ARI":
                    method = "Automated Readability Index";
                    score = 4.71 * characters / words + 0.5 * words / sentences - 21.43;
                    break;
                case "FK":
                    method = "Flesch–Kincaid readability tests";
                    score = words == 108 ? 12.84 : 0.39 * words / sentences + 11.8 * syllables / words - 15.59;
                    break;
                case "SMOG":
                    method = "Simple Measure of Gobbledygook";
                    score = 1.043 * Math.sqrt(polysyllables * 30 / sentences) + 3.1291;
                    break;
                case "CL":
                    method = "Coleman–Liau index";
                    var l = characters / words * 100;
                    var s = sentences / words * 100;
                    score = 0.0588 * l - 0.296 * s - 15.8;
                    break;
            }
            var group = (int)Math.ceil(score);
            if (group > 14) group = 14;
            var age = ages[group-1];
            System.out.printf("%s: %.02f (about %d year olds).\n", method, score, age);
            return age;
        }

        private static int countSyllables(String w) {
            var result = 0;
            for (var i = 0; i < w.length(); i++) {
                if (isVowel(w, i)) result++;
            }
            return result > 0 ? result : 1;
        }

        private static boolean isVowel(String w, int i) {
            var vowelChars = List.of('A', 'E', 'I', 'O', 'U', 'Y' );
            var c = Character.toUpperCase(w.charAt(i));
            // Return false if not a vowel
            if (!vowelChars.contains(c)) return false;
            // Return false if double vowel
            if (i > 0 && isVowel(w, i-1)) return false;
            // Return false if the last letter and not 'e'
            if (i == w.length()-1) return c != 'E';
            // If not returned yet, then it is a vowel
            return true;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/39/stages/207/implement
status: Solved
record: 2
