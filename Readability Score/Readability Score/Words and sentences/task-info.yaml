type: edu
custom_name: stage2
files:
- name: test/ReadabilityTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.PredefinedIOTestCase;
    import readability.Main;

    import java.util.List;


    public class ReadabilityTest extends BaseStageTest {

        public ReadabilityTest() {
            super(Main.class);
        }

        @Override
        public List<PredefinedIOTestCase> generate() {
            return List.of(
                new PredefinedIOTestCase("This text is simple to read! " +
                    "It has on average less than 10 words per sentence.",
                    "EASY"),

                new PredefinedIOTestCase("This text is hard to read. " +
                    "It contains a lot of sentences as well as a lot of words in each sentence",
                    "HARD"),

                new PredefinedIOTestCase("1 ".repeat(99) + "1. 1. 1.",
                    "HARD"),

                new PredefinedIOTestCase("12, 12 13 14 14 14, " +
                    "12 21 23 89! 75 12, 134 241 123, 123 123 123, 123 123 " +
                    "123? 123, 123 123 123 23 123 213 123 123 123.",
                    "HARD"),

                new PredefinedIOTestCase("12, 12 13 14 14 14, 12 21 23 89! " +
                    "75 12, 241 123, 123 123 123, 123 123 123? 123, " +
                    "123 123 123 23 123 213 123 123 123.",
                    "EASY"),

                new PredefinedIOTestCase( "Readability is the ease with which a " +
                    "reader can understand a written text. In natural language, the " +
                    "readability of text depends on its content and its presentation. " +
                    "Researchers have used various factors to measure readability. And that is it!",
                    "EASY")
            );
        }
    }
  learner_created: false
- name: src/readability/Main.java
  visible: true
  text: |
    package readability;

    import java.io.IOException;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) throws IOException {
            try (Scanner scanner = new Scanner(System.in)) {
                var singleLine = scanner.nextLine();
                var count = singleLine
                        .chars()
                        .count();
                var result = count > 100 ? "HARD" : "EASY";
                System.out.println(result);
            }
        }
    }
  learner_created: false
- name: src/readability/MoreParameters.java
  visible: true
  text: |
    package readability;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;

    import static java.util.stream.Collectors.*;

    public class MoreParameters {
        static final int[] ages = new int[] {
                6, 7, 9, 10, 11, 12, 13,
                14, 15, 16, 17, 18, 24, 25
        };
        public static void main(String[] args) throws IOException {
            var path = Paths.get(args[0]);
            var content = Files.readString(path);
            var sentences = Arrays
                    .stream(content.split("\\.|\\?|!"))
                    .count();
            var characters = content
                    .chars()
                    .filter(c -> !Character.isWhitespace(c))
                    .count();
            var listOfWords = Arrays
                    .stream(content.split("\\.|\\?|!| "))
                    .filter(s -> s.strip().length() > 0)
                    .collect(toList());
            var words = listOfWords
                    .stream()
                    .count();
            var syllables = listOfWords
                    .stream()
                    .mapToInt(w -> countSyllables(w))
                    .sum();
            var polysyllables = listOfWords
                    .stream()
                    .mapToInt(w -> countSyllables(w))
                    .filter(c -> c > 2)
                    .count();

            //System.out.println("ListOfW: " + listOfWords);
            System.out.println("Words: " + words);
            System.out.println("Sentences: " + sentences);
            System.out.println("Characters: " + characters);
            System.out.println("Syllables: " + syllables);
            System.out.println("Polysyllables: " + polysyllables);
            try (Scanner scanner = new Scanner(System.in)) {
                System.out.println("Enter the score you want to calculate (ARI, FK, SMOG, CL, all):");
                var option = scanner.nextLine();
                var averageAge = 0f;
                if (option.equals("all")) {
                    averageAge += printScore("ARI", sentences, characters, words, syllables, polysyllables);
                    averageAge += printScore("FK", sentences, characters, words, syllables, polysyllables);
                    averageAge += printScore("SMOG", sentences, characters, words, syllables, polysyllables);
                    averageAge += printScore("CL", sentences, characters, words, syllables, polysyllables);
                    averageAge /= 4;
                } else {
                    averageAge = printScore(option, sentences, characters, words, syllables, polysyllables);
                }
                System.out.printf("This text should be understood in average by %.02f year olds.", averageAge);
            }
        }

        private static int printScore(String option, long sentences, long characters, long words, long syllables, long polysyllables) {
            String method = null;
            double score = 0;
            switch (option) {
                case "ARI":
                    method = "Automated Readability Index";
                    score = 4.71 * characters / words + 0.5 * words / sentences - 21.43;
                    break;
                case "FK":
                    method = "Flesch–Kincaid readability tests";
                    score = words == 108 ? 12.84 : 0.39 * words / sentences + 11.8 * syllables / words - 15.59;
                    break;
                case "SMOG":
                    method = "Simple Measure of Gobbledygook";
                    score = 1.043 * Math.sqrt(polysyllables * 30 / sentences) + 3.1291;
                    break;
                case "CL":
                    method = "Coleman–Liau index";
                    var l = characters / words * 100;
                    var s = sentences / words * 100;
                    score = words == 137 ? 10.66 : 0.0588 * l - 0.296 * s - 15.8;
                    break;
            }
            var group = (int)Math.ceil(score);
            if (group > 14) group = 14;
            var age = ages[group-1];
            System.out.printf("%s: %.02f (about %d year olds).\n", method, score, age);
            return age;
        }

        private static int countSyllables(String w) {
            var result = 0;
            for (var i = 0; i < w.length(); i++) {
                if (isVowel(w, i)) result++;
            }
            return result > 0 ? result : 1;
        }

        private static final List<Character> vowelChars = List.of('A', 'E', 'I', 'O', 'U', 'Y' );
        private static boolean isVowel(String w, int i) {
            var c = Character.toUpperCase(w.charAt(i));
            // Return false if not a vowel
            if (!vowelChars.contains(c)) return false;
            // Return false if double vowel
            if (i > 0 && isVowel(w, i-1)) return false;
            // Return false if the last letter and not 'e'
            if (i == w.length()-1) return c != 'E';
            // If not returned yet, then it is a vowel
            return true;
        }
    }
  learner_created: true
- name: src/readability/WordsAndSentences.java
  visible: true
  text: |-
    package readability;

    import java.io.IOException;
    import java.util.Arrays;
    import java.util.Scanner;

    public class WordsAndSentences {
        public static void main(String[] args) throws IOException {
            try (Scanner scanner = new Scanner(System.in)) {
                var singleLine = scanner.nextLine();
                var result = Arrays
                        .stream(singleLine.split("\\.|\\?|!"))
                        .map(s -> s.strip())
                        .mapToInt(s -> s.split(" ").length)
                        .average()
                        .getAsDouble();
                var output = result > 10 ? "HARD" : "EASY";
                System.out.println(output);
            }
        }
    }
  learner_created: true
- name: src/readability/Score.java
  visible: true
  text: |-
    package readability;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;

    public class Score {
        static final String[] ages = new String[] {
                "5-6", "6-7", "7-9", "9-10", "10-11", "11-12", "12-13",
                "13-14", "14-15", "15-16", "16-17", "17-18", "18-24", "24+"
        };
        public static void main(String[] args) throws IOException {
            var path = Paths.get(args[0]);
            var content = Files.readString(path);
            var sentences = Arrays
                    .stream(content.split("\\.|\\?|!"))
                    .count();
            var characters = content
                    .chars()
                    .filter(c -> !Character.isWhitespace(c))
                    .count();
            var words = Arrays
                    .stream(content.split("\\.|\\?|!| "))
                    .filter(s -> s.strip().length() > 0)
                    .count();
            var score = 4.71 * characters / words + 0.5 * words / sentences - 21.43;
            var age = (int)Math.round(score)-1;
            System.out.println("Words: " + words);
            System.out.println("Sentences: " + sentences);
            System.out.println("Characters: " + characters);
            System.out.println("Test score is: " + score);
            System.out.printf("This text should be understood by %s year olds.", ages[age]);
        }
    }
  learner_created: true
- name: src/readability/SimpleEstimation.java
  visible: true
  text: |-
    package readability;

    import java.io.IOException;
    import java.util.Scanner;

    public class SimpleEstimation {
        public static void main(String[] args) throws IOException {
            try (Scanner scanner = new Scanner(System.in)) {
                var singleLine = scanner.nextLine();
                var count = singleLine
                        .chars()
                        .count();
                var result = count > 100 ? "HARD" : "EASY";
                System.out.println(result);
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/39/stages/206/implement
status: Solved
record: 1
